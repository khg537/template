//===========
// 과제 1.  N1 - N2 사이의 합을 구하는 Sum을 만드세요.
//==============
//enable_if 사용
#include <iostream>
#include <type_traits>

using namespace std;

template<typename T>
typename enable_if<is_integral<T>::value>::type
Sum(T a, T b)
{
    cout << "sum : "<<a + b<<endl;
}


int main()
{
  int n1 = 5, n2 = 10;
  short s1 = 5,  s2 = 10;
  double d1 = 3.4, d2 = 1.2;

  Sum(n1, n2);
  Sum(s1, s2);
//  Sum(d1, d2);
}

//static_assert 사용
#include <iostream>
#include <type_traits>

using namespace std;

template<typename T>
void Sum(T a, T b)
{
  static_assert(is_integral<T>::value, "error");

  cout << "sum : "<<a + b<<endl;
}

int main()
{
  int n1 = 5, n2 = 10;
  short s1 = 5,  s2 = 10;
  double d1 = 3.4, d2 = 1.2;

  Sum(n1, n2);
  Sum(s1, s2);
//  Sum(d1, d2);
}

//================
//  과제 2
//================

#include <iostream>
#include <type_traits>
#include <vector>
#include <list>

using namespace std;

template<int N> struct int2type
{
  enum{ value = N};
};

template<typename T> struct xis_array
{
  static constexpr bool value = false;
  static constexpr size_t  size = -1;
};

template<typename T, size_t N> struct xis_array<T[N]>
{
  static constexpr bool value = true;
  static constexpr size_t size = N;
};

template<typename T> struct xis_array<T[]>
{
  static constexpr bool value = true;
};


template<typename T>
double average_imp(T& a, int2type<1>)
{
    double sum = 0;

    for (int i = 0 ; i < xis_array<T>::size ; i++)
    {
      sum += a[i];
    }
    return (double)sum / xis_array<T>::size;
}

template<typename T>
double average_imp(T& a, int2type<0>)
{
    double sum = 0;

    for (typename T::iterator it = a.begin(); it != a.end() ; it++)
    {
      sum += *it;
    }

    return (double)sum / a.size();
}

template<typename T>
double average(T& a)
{

  return average_imp(a,int2type<xis_array<T>::value>());

}

int main()
{
  int x[10] = {1, 2, 3, 4, 5 , 6, 7, 8, 9, 10};
  vector<int> v{1, 2, 3, 4, 5 , 6, 7, 8, 9, 10};

  cout << average(x) << endl;
  cout << average(v) << endl;
  return 0;
}

//================
//  과제 3
//================

#include <iostream>

using namespace std;

class A {
    int m;
    void test1(){}
};

class B {
    virtual void test2(){}
    void test3(){}
};

template <typename T>
std::true_type check(
    decltype(dynamic_cast<const volatile void*>(static_cast<T*>(nullptr)))
);

template <typename T>
std::false_type check(...);

template <typename T>
struct has_virtual_function : decltype(check<T>(nullptr))
{

};

template<typename T>
void foo(T& c)
{
  if (has_virtual_function<T>::value)
    cout << " T has virtual function"<<endl;
  else
    cout << " T has not virtual function"<<endl;

}

int main()
{
  A a;
  B b;

  foo(a);
  foo(b);
}

//================
//  과제 4
//================

#include <iostream>
#include <cstring>

using namespace std;

template<typename...Types>
void cpp_print(char* arg, Types ... args)
{
  int num = 0;

  size_t nSize = sizeof...(args);

  char* ptr = strstr(arg, "%d" );

  while(ptr != nullptr && ++num)
  {
    ptr = strstr(ptr +1, "%d" );
  }

  if (nSize != num) throw std::invalid_argument( "Invalid argument" );

  printf(arg, args...);

}

int main()
{
  // printf("%d\n", 1, 2,3);
  // printf("%d%d\n", 1);


  try
  {
//     cpp_print("hello world!!! %d  %d\n",13, 5);
//     cpp_print("hello world!!! %d  %d\n",13, 5, 4);
//     cpp_print("hello world!!! %d %d  %d \n",13, 5, 5);
    // cpp_print("%d\n", 1);
//    cpp_print("%d%d\n", 1, 2);
    cpp_print("%d\n", 1, 2,3);
    cpp_print("%d%d\n", 1);
  }
  catch(...)
  {
    cout << " Exception occurred!!!" << endl;
  }
  return 0;
}

